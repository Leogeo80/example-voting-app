pipeline {
   
   agent none 
    stages {
        stage('build'){
              agent{
                  docker{
                    image 'maven:3.6.1-jdk-8-alpine'
                    args '-v $HOME/.m2:/root/.m2'
                  }
                  }
            when{
              changeset "**/*worker/**"
            }        
            steps{
                    echo 'Compiling worker app'
                    dir ('worker'){
                      sh 'mvn compile'
                    }
            }
        }
        stage('test'){
            agent{
                  docker{
                    image 'maven:3.6.1-jdk-8-alpine'
                    args '-v $HOME/.m2:/root/.m2'
                  }
                  }
            when{
                changeset "**/*worker/**"
              } 
            steps{
                    echo 'Running Unit Test on worker app'
                    dir('worker'){
                      sh 'mvn clean test'
                    }
                  }
        }
        stage('package'){
            agent{
                  docker{
                    image 'maven:3.6.1-jdk-8-alpine'
                    args '-v $HOME/.m2:/root/.m2'
                  }
                  }
            when{
              branch 'master'
              changeset "**/worker/**"
            }
            steps{
                    echo 'Packaging worker app'
                    dir('worker'){
                      sh 'mvn package -DskipTest'
                      archiveArtifacts artifacts: '**/target/*.jar', fingerprint: true
                    }
                  }
        }
        stage('docker-package'){
            agent any
            when{
                changeset "**/worker/**"
                branch 'master'
            }
            steps{
                    echo 'Packaging worker app with docker'
                    script {
                      docker.withRegistry('https://index.docker.io/v1/', 'leogeoDocker'){
                        /*def workerImage =  docker.build("leogeo80/worker:v1}", "./worker")*/
                        def workerImage =  docker.build("leogeo80/worker:v${env.BUILD_ID}", "./worker")
                        workerImage.push()
                        workerImage.push("${env.BRANCH_NAME}")
                      }
                    }
                  }
        }
    }
   post{
     always{
	 echo 'Pipeline for worker is complete..'
     }
     
   }

}
