  
pipeline {

    agent none
    
      stages {
       stage('build'){
           when{
                changeset "**/worker/**"
           }
           agent{
            docker {
            image 'maven:3.6.1-jdk-8-alpine'
	    args '-v $HOME/.m2:/root/.m2'
                }
            }
           steps{
             echo 'Compiling worker app'
             dir ('worker'){
               sh 'mvn compile'
             }
           }
       }
       stage('test'){
           when{
                changeset "**/worker/**"
           }
           agent{
            docker {
            image 'maven:3.6.1-jdk-8-alpine'
	    args '-v $HOME/.m2:/root/.m2'
                }
            }
           steps{
             echo 'Running Unit Test on result app'
             dir('worker'){
               sh 'mvn clean test'
              }
           }
       }

       stage('package'){
            agent{
                  docker{
                    image 'maven:3.6.1-jdk-8-alpine'
                    args '-v $HOME/.m2:/root/.m2'
                  }
                  }
            when{
              branch 'master'
              changeset "**/worker/**"
            }
            steps{
                    echo 'Packaging worker app'
                    dir('worker'){
                      sh 'mvn package -DskipTest'
                      archiveArtifacts artifacts: '**/target/*.jar', fingerprint: true
                    }
                  }
        }       

       stage('deploy to dev'){          
           agent any          
           when{            
	     branch 'master'          
	   }          
	   steps{            
	     echo 'Deploy instavote app with docker compose'            
	     sh 'docker-compose up -d'          
	   }     
       }

       stage('docker-package'){
            agent any
            when{
                changeset "**/worker/**"
		
          }
            steps{
                    echo 'Packaging worker app with docker'
                    script {
                      docker.withRegistry('https://index.docker.io/v1/', 'dockerlogin'){
			def workerImage =  docker.build("leogeo80/worker:v${env.BUILD_ID}", "./worker")
                        workerImage.push()
                        workerImage.push("latest")
                      }
                    }
                  }
        }


   }

}
